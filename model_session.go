/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
	"time"
)

// Session struct for Session
type Session struct {
	Active *bool `json:"active,omitempty"`
	AuthAt *time.Time `json:"authAt,omitempty"`
	AuthLevel *int32 `json:"authLevel,omitempty"`
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	Id *string `json:"id,omitempty"`
	Identity *SessionIdentity `json:"identity,omitempty"`
	IdentityId *string `json:"identityId,omitempty"`
	IssuedAt *time.Time `json:"issuedAt,omitempty"`
}

// NewSession instantiates a new Session object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSession() *Session {
	this := Session{}
	return &this
}

// NewSessionWithDefaults instantiates a new Session object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionWithDefaults() *Session {
	this := Session{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Session) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Session) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Session) SetActive(v bool) {
	o.Active = &v
}

// GetAuthAt returns the AuthAt field value if set, zero value otherwise.
func (o *Session) GetAuthAt() time.Time {
	if o == nil || o.AuthAt == nil {
		var ret time.Time
		return ret
	}
	return *o.AuthAt
}

// GetAuthAtOk returns a tuple with the AuthAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetAuthAtOk() (*time.Time, bool) {
	if o == nil || o.AuthAt == nil {
		return nil, false
	}
	return o.AuthAt, true
}

// HasAuthAt returns a boolean if a field has been set.
func (o *Session) HasAuthAt() bool {
	if o != nil && o.AuthAt != nil {
		return true
	}

	return false
}

// SetAuthAt gets a reference to the given time.Time and assigns it to the AuthAt field.
func (o *Session) SetAuthAt(v time.Time) {
	o.AuthAt = &v
}

// GetAuthLevel returns the AuthLevel field value if set, zero value otherwise.
func (o *Session) GetAuthLevel() int32 {
	if o == nil || o.AuthLevel == nil {
		var ret int32
		return ret
	}
	return *o.AuthLevel
}

// GetAuthLevelOk returns a tuple with the AuthLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetAuthLevelOk() (*int32, bool) {
	if o == nil || o.AuthLevel == nil {
		return nil, false
	}
	return o.AuthLevel, true
}

// HasAuthLevel returns a boolean if a field has been set.
func (o *Session) HasAuthLevel() bool {
	if o != nil && o.AuthLevel != nil {
		return true
	}

	return false
}

// SetAuthLevel gets a reference to the given int32 and assigns it to the AuthLevel field.
func (o *Session) SetAuthLevel(v int32) {
	o.AuthLevel = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *Session) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *Session) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *Session) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Session) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Session) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Session) SetId(v string) {
	o.Id = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *Session) GetIdentity() SessionIdentity {
	if o == nil || o.Identity == nil {
		var ret SessionIdentity
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetIdentityOk() (*SessionIdentity, bool) {
	if o == nil || o.Identity == nil {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *Session) HasIdentity() bool {
	if o != nil && o.Identity != nil {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given SessionIdentity and assigns it to the Identity field.
func (o *Session) SetIdentity(v SessionIdentity) {
	o.Identity = &v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *Session) GetIdentityId() string {
	if o == nil || o.IdentityId == nil {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetIdentityIdOk() (*string, bool) {
	if o == nil || o.IdentityId == nil {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *Session) HasIdentityId() bool {
	if o != nil && o.IdentityId != nil {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *Session) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetIssuedAt returns the IssuedAt field value if set, zero value otherwise.
func (o *Session) GetIssuedAt() time.Time {
	if o == nil || o.IssuedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil || o.IssuedAt == nil {
		return nil, false
	}
	return o.IssuedAt, true
}

// HasIssuedAt returns a boolean if a field has been set.
func (o *Session) HasIssuedAt() bool {
	if o != nil && o.IssuedAt != nil {
		return true
	}

	return false
}

// SetIssuedAt gets a reference to the given time.Time and assigns it to the IssuedAt field.
func (o *Session) SetIssuedAt(v time.Time) {
	o.IssuedAt = &v
}

func (o Session) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.AuthAt != nil {
		toSerialize["authAt"] = o.AuthAt
	}
	if o.AuthLevel != nil {
		toSerialize["authLevel"] = o.AuthLevel
	}
	if o.ExpiresAt != nil {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Identity != nil {
		toSerialize["identity"] = o.Identity
	}
	if o.IdentityId != nil {
		toSerialize["identityId"] = o.IdentityId
	}
	if o.IssuedAt != nil {
		toSerialize["issuedAt"] = o.IssuedAt
	}
	return json.Marshal(toSerialize)
}

type NullableSession struct {
	value *Session
	isSet bool
}

func (v NullableSession) Get() *Session {
	return v.value
}

func (v *NullableSession) Set(val *Session) {
	v.value = val
	v.isSet = true
}

func (v NullableSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSession(val *Session) *NullableSession {
	return &NullableSession{value: val, isSet: true}
}

func (v NullableSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


