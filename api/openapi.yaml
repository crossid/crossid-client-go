openapi: 3.0.0
info:
  contact:
    email: developer@crossid.io
    name: Developers
    url: http://www.crossid.io/developer
  description: |
    CrossID API Reference
  license:
    name: Proprietary
    url: http://www.crossid.io/lic
  termsOfService: https://crossid.io/tos
  title: CrossID Public API
  version: 1.0.0
  x-logo:
    url: https://crossid.io/crossid-logo.png
externalDocs:
  description: Find out more about CrossID
  url: https://www.crossid.io/developer
servers:
- description: Development
  url: http://{tenant}.local.crossid.io:{port}/api/v1
  variables:
    port:
      default: "8000"
    tenant:
      default: dev
      description: Tenant Identifier
security:
- bearerAuth: []
tags:
- description: Audit Endpoints
  name: audit
- description: Filters Endpoints
  name: filters
- description: Node Health Endpoints
  name: health
- description: Data mining and role clustering Endpoints
  name: mining
- description: Insight discovery and resolution Endpoints
  name: insights
- description: Resources Endpoints
  name: resources
- description: rules Endpoints
  name: rules
- description: Sessions Endpoints
  name: sessions
- description: API Tokens Endpoints
  name: apiTokens
- description: Authentication Errors Endpoints
  name: authErrors
- description: Login Endpoints
  name: login
- description: Flows and Tasks endpoints
  name: flows
- description: Jobs Endpoints
  name: jobs
- description: Schemas Endpoints
  name: schemas
- description: Secrets Endpoints
  name: secrets
- description: Changes Endpoints
  name: changes
- description: Applications Endpoints
  name: apps
- description: Mappers Endpoints
  name: mappers
- description: Portal Endpoints
  name: portal
- description: Resource References Endpoints
  name: refs
- description: Resource Types Endpoints
  name: resourceTypes
paths:
  /apps/:
    get:
      description: This endpoint can be used to retrieve Applications.
      operationId: listApps
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appsList'
          description: A paged list of applications.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Applications
      tags:
      - apps
      x-order: 10
    post:
      operationId: createApp
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/App'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
          description: The Application state after creation.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create an App
      tags:
      - apps
      x-order: 30
  /apps/.changes:
    post:
      description: |
        Read applications data, compare it to the stored state and produce the delta as a changelog. The produced changelog could then be observed and applied.
      operationId: changesApps
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AppsChanges'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: A trackable job
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Discover App Changes
      tags:
      - apps
      x-order: 60
  /apps/.import:
    post:
      description: |
        Read applications data, compare it to the stored state and produce the delta as a changelog. As opposed to `.changes` endpoint, the produced changelog is then applied immediately.
      operationId: importApps
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/AppsChanges'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: A trackable job
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Discover and Import App Changes Into Store
      tags:
      - apps
      x-order: 50
  /apps/{appId}:
    get:
      operationId: getApp
      parameters:
      - description: The id of the app to retrieve
        explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get an App
      tags:
      - apps
      x-order: 20
    put:
      operationId: replaceApp
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the app to replace
        explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/App'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
          description: The Application state after replacement.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "412":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Replace an App
      tags:
      - apps
      x-order: 40
  /apps/{appId}/.ping:
    post:
      description: Typically connectivity and authentication checks.
      operationId: pingApp
      parameters:
      - description: The id of the app to ping
        explode: false
        in: path
        name: appId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                latency: 86
                message: successfully connected to azure
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
        "503":
          content:
            application/json:
              example:
                code: 503
                message: bad credentials
                status: Unavailable
              schema:
                $ref: '#/components/schemas/Error'
          description: The application is unavailable.
      summary: Check App Health
      tags:
      - apps
      x-order: 70
  /audit/commits:
    get:
      operationId: listCommits
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commitsList'
          description: A paged list of commits.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Commits
      tags:
      - audit
      x-order: 10
  /audit/commits/{id}:
    get:
      operationId: getCommit
      parameters:
      - description: The id of the commit to retrieve
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Commit
      tags:
      - audit
      x-order: 20
  /auth/api-tokens/:
    get:
      operationId: listAPITokens
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTokensList'
          description: A paged list of API tokens.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List API Tokens belonging to the authenticated user
      tags:
      - apiTokens
      x-order: 10
    post:
      operationId: createAPIToken
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: The API token state after creation.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Insert an API Token
      tags:
      - apiTokens
      x-order: 20
  /auth/api-tokens/{id}:
    delete:
      operationId: deleteAPIToken
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the API token to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The API Token was deleted successfully.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Delete an API token
      tags:
      - apiTokens
      x-order: 30
  /auth/auth-errors/:
    get:
      operationId: getErrors
      parameters:
      - description: The id of the errors document to retrieve
        explode: true
        in: query
        name: error
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrors'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Info for a specific errors.
      tags:
      - authErrors
  /auth/self-service/login/flows:
    get:
      operationId: getLoginFlow
      parameters:
      - description: The id of the flow to retrieve
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginFlow'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Info for a specific login flow.
      tags:
      - login
  /auth/sessions/revoke:
    delete:
      operationId: sessionRevoke
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                sessionToken:
                  description: The token of the session to invalidate
                  type: string
              type: object
      responses:
        "204":
          description: Session invalidated.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
      summary: Invalidates a session
      tags:
      - sessions
      x-order: 20
  /auth/sessions/whoami:
    get:
      operationId: whoami
      parameters:
      - explode: false
        in: header
        name: Authorization
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: A session object belongs to the HTTP session.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Check who the current HTTP session belongs to
      tags:
      - sessions
      x-order: 10
  /changes/:
    get:
      operationId: listChangeLogs
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/changeLogsList'
          description: A paged list of change logs.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Change Logs.
      tags:
      - changes
  /changes/{id}:
    get:
      operationId: getChangeLog
      parameters:
      - description: The id of the changeLog to retrieve
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLog'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Change-Log.
      tags:
      - changes
  /changes/{id}/.apply:
    post:
      description: |
        Use apply in order to apply discovered changes.

        The discovered changes may be applied directly on store or via jobs.
        when applied via jobs, the changes will affect connected applications.
      operationId: applyChangeLog
      parameters:
      - description: The id of the changeLog to apply.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/ApplyChangeLog'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyChangeLogResponse'
          description: A report containing possible faults.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Apply a ChangeLog
      tags:
      - changes
  /changes/{id}/.cancel:
    post:
      operationId: cancelChangeLog
      parameters:
      - description: The id of the changeLog to cancel.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/CancelChangeLog'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLog'
          description: A report containing possible faults.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Cancel a ChangeLog.
      tags:
      - changes
  /changes/adds:
    get:
      description: |
        The list is invoked across all change logs.

        To retrieve insertions for a specific change log, use filter (e.g., `meta.logId eq "id-of-changelog"`)
      operationId: listAddChanges
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceList'
          description: A paged list of insertions.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List insertions in change logs
      tags:
      - changes
  /changes/deletes:
    get:
      description: |
        The list is invoked across all change logs.

        To retrieve deletions for a specific change log, use filter (e.g., `meta.logId eq "id-of-changelog"`)
      operationId: listDeleteChanges
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceList'
          description: A paged list of deletions.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List deletions in change logs
      tags:
      - changes
  /changes/patches:
    get:
      description: |
        The list is invoked across all change logs.

        To retrieve patches for a specific change log, use filter (e.g., `meta.logId eq "id-of-changelog"`)
      operationId: listPatchChanges
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patchesList'
          description: A paged list of patches.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List patches in change logs
      tags:
      - changes
  /changes/replaces:
    get:
      description: |
        The list is invoked across all change logs.

        To retrieve insertions for a specific change log, use filter (e.g., `meta.logId eq "id-of-changelog"`)
      operationId: listReplaceChanges
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceList'
          description: A paged list of replaces.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List replaces in change logs
      tags:
      - changes
  /filters/:
    get:
      operationId: listFilters
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
          description: A paged list of filters.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Filters
      tags:
      - filters
      x-order: 10
    post:
      operationId: createFilter
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
          description: The Filter state after creation.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create a Filter
      tags:
      - filters
      x-order: 30
  /filters/.valid:
    post:
      description: Test if the given filter syntax is valid.
      operationId: validFilter
      responses:
        "200":
          content:
            application/json:
              example:
                valid: true
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Expected response to a valid filter.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Check Filter Validity
      tags:
      - filters
      x-order: 60
  /filters/{id}:
    delete:
      operationId: deleteFilter
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the filter to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The Filter was deleted successfully.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Delete a Filter
      tags:
      - filters
      x-order: 50
    get:
      operationId: getFilter
      parameters:
      - description: The id of the filter to retrieve
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Filter
      tags:
      - filters
      x-order: 20
    put:
      operationId: replaceFilter
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the filter to replace.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SingleFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
          description: The filter state after replacement.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "412":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Replace a Filter
      tags:
      - filters
      x-order: 40
  /flows/:
    get:
      operationId: listFlowInstances
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flowInstancesList'
          description: A paged list of flow instances.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Flow Instances
      tags:
      - flows
      x-order: 10
  /flows/{flowInstanceId}:
    get:
      operationId: getFlowInstance
      parameters:
      - description: The id of the flow instance to retrieve
        explode: false
        in: path
        name: flowInstanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowInstance'
          description: A single flow instance.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get Flow Instance
      tags:
      - flows
      x-order: 20
  /flows/{flowInstanceId}/.cancel:
    post:
      operationId: cancelFlowInstance
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      - description: The id of the flow instance to cancel
        explode: false
        in: path
        name: flowInstanceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CancelFlowInstance'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flowCancel'
          description: Flow was canclled successfully along with all it's jobs
        "207":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flowCancel'
          description: Flow was canclled successfully but some of it's jobs failed
            to cancel
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Cancel Flow Instance
      tags:
      - flows
      x-order: 30
  /flows/tasks:
    get:
      operationId: listTasks
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tasksList'
          description: A paged list of tasks.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Tasks
      tags:
      - flows
      x-order: 60
    post:
      operationId: createTask
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/SingleTask'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: The task's state after creation.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create a Task
      tags:
      - flows
  /flows/tasks/{taskId}:
    get:
      operationId: getTask
      parameters:
      - description: The id of the task instance to retrieve
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: A single task.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Task
      tags:
      - flows
      x-order: 70
  /flows/tasks/{taskId}/.cancel:
    post:
      operationId: cancelTask
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      - description: The id of the task instance to cancel
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              type: object
        description: empty body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: A single task.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Cancel a Task
      tags:
      - flows
      x-order: 90
  /flows/tasks/{taskId}/.complete:
    post:
      operationId: completeTask
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      - description: The id of the task instance to complete
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                variables:
                  additionalProperties: true
                  description: variables to complete the task with
                  type: object
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: A single task.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Complete a Task
      tags:
      - flows
      x-order: 80
  /health/alive:
    get:
      description: |
        This endpoint returns an ok status (200) if the node is healthy or service unavailable (503) otherwise.
        This endpoint does not check the aliveness of a cluster rather a single node.
      operationId: healthAlive
      responses:
        "200":
          content:
            application/json:
              example:
                status: OK
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: node is alive.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
        "503":
          content:
            application/json:
              example:
                errors:
                  os: node memory consumption is high
                status: Service Unavailable
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: health problem.
      summary: Check aliveness
      tags:
      - health
  /health/ready:
    get:
      description: |
        This endpoint returns an ok status (200) if the node is ready to handle requests.
      operationId: healthReady
      responses:
        "200":
          content:
            application/json:
              example:
                status: OK
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: node is ready.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
        "503":
          content:
            application/json:
              example:
                errors:
                  os: node memory consumption is high
                status: Service Unavailable
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: health problem.
      summary: Check readiness
      tags:
      - health
  /insights/discover:
    post:
      operationId: insightDiscovery
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/insightList'
          description: The data was posted to the ML server successfuly
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Send classication data to ML server.
      tags:
      - insights
  /internal/internal/remove-broken-refs:
    post:
      operationId: removeBrokenRefs
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/RefsRemoval'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLog'
          description: Changelog is ready to be applied
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Returns a summary of all broken references in resources in the system
      tags:
      - internal
  /internal/internal/remove-expired-refs:
    post:
      operationId: removeExpiredRefs
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/RefsRemoval'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLog'
          description: Changelog is ready to be applied
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Returns a summary of all expired references in resources in the system.
      tags:
      - internal
  /jobs/:
    get:
      operationId: listJobs
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobsList'
          description: A paged list of jobs.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Jobs
      tags:
      - jobs
      x-order: 10
  /jobs/{id}:
    get:
      operationId: getJob
      parameters:
      - description: The id of the job to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Job
      tags:
      - jobs
      x-order: 20
    patch:
      operationId: patchJob
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the job to patch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/Patch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: The job state after the update.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Update a Job
      tags:
      - jobs
      x-order: 30
  /json-schemas/:
    post:
      operationId: createJSONSchema
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONSchema'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONSchema'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create JSON Schema
      tags:
      - schemas
      x-order: 60
  /json-schemas/{id}:
    get:
      operationId: getJSONSchema
      parameters:
      - description: The id of the schema to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONSchema'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a JSON Schema
      tags:
      - schemas
      x-order: 50
    put:
      operationId: replaceJSONSchema
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the schema to replace.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONSchema'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONSchema'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: replace a JSON Schema
      tags:
      - schemas
      x-order: 70
  /mappers/:
    get:
      operationId: listMappers
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mappersList'
          description: A paged list of mappers.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Mappers
      tags:
      - mappers
      x-order: 10
    post:
      operationId: createMapper
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/SingleMapper'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapper'
          description: The mapper state after creation.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create a mapper
      tags:
      - mappers
  /mappers/{id}:
    get:
      operationId: getMapper
      parameters:
      - description: The id of the mappers to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapper'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Mapper
      tags:
      - mappers
      x-order: 20
    patch:
      operationId: patchMapper
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the mapper to patch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SingleMapper'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapper'
          description: The mapper state after the update.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Update a Mapper
      tags:
      - mappers
      x-order: 40
    put:
      operationId: replaceMapper
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the mappers to replace.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SingleMapper'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapper'
          description: The mapper state after replacement.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "412":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Replace a Mapper
      tags:
      - mappers
      x-order: 30
  /mining/export-classification-data:
    post:
      operationId: exportClassificationData
      responses:
        "200":
          description: The data was posted to the ML server successfuly
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Send classication data to ML server.
      tags:
      - mining
  /portal/.gsearch:
    post:
      operationId: portalFindRequest
      requestBody:
        $ref: '#/components/requestBodies/Search'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourcesList'
          description: Flows created after this request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Make a portal specific resources search
      tags:
      - portal
  /portal/request:
    post:
      operationId: portalRequest
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementRequest'
        description: dsadsa
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementReqResponse'
          description: Flows created after this request.
        "207":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementReqResponse'
          description: Some entitlements could not be requested.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Make a portal request
      tags:
      - portal
  /resource-types/:
    get:
      operationId: listResourceTypes
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceTypesList'
          description: A paged list of resource types.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Resource Types
      tags:
      - resourceTypes
      x-order: 10
    post:
      operationId: createResourceType
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceType'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
          description: The Resource Type state after creation.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create a Resource Type
      tags:
      - resourceTypes
      x-order: 30
  /resource-types/{id}:
    get:
      operationId: getResourceType
      parameters:
      - description: The id of the resource type to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Resource Type
      tags:
      - resourceTypes
      x-order: 20
    put:
      operationId: replaceResourceType
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the resource type to replace.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceType'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
          description: The Resource Type state after replacement.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "412":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Replace a Resource Type
      tags:
      - resourceTypes
      x-order: 40
  /resources/:
    get:
      description: This endpoint queries against resources across all applications
        and types.
      operationId: listResources
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourcesList'
          description: A paged list of resources.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Resources
      tags:
      - resources
      x-order: 10
    post:
      description: This endpoint diffs resource
      operationId: diffResources
      requestBody:
        $ref: '#/components/requestBodies/ResourceDiff'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceDiffRes'
          description: successful diff req
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Diffing Resources
      tags:
      - resources
      x-order: 65
  /resources/.correlate:
    post:
      description: Correlate resources into other resources by filter
      operationId: correlateResources
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/CorrelateResources'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLog'
          description: A changelog
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Correlate Resources
      tags:
      - resources
      x-order: 70
  /resources/.map:
    post:
      description: Map resources into other resources by filter
      operationId: mapResources
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/MapResources'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeLog'
          description: A changelog
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Map Resources
      tags:
      - resources
      x-order: 80
  /resources/{appID}/{resourceTypes}:
    get:
      description: This endpoint queries against resources of a specific resources
        type.
      operationId: listResourcesByAppAndType
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourcesList'
          description: A paged list of resources.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Resources for a Type
      tags:
      - resources
      x-order: 12
    post:
      description: |
        This endpoint creates a new resource. The resource may be created locally on store or provisioned to the remote app, depends on application configuration.
      operationId: createResource
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create a Resource
      tags:
      - resources
      x-order: 20
  /resources/{appID}/{resourceTypes}/.async:
    post:
      operationId: createResourceAsync
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the time where the operation should be executed.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: notBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Resource'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create a Resource Asynchonously
      tags:
      - resources
      x-order: 22
  /resources/{appID}/{resourceTypes}/{id}:
    delete:
      operationId: deleteResourceById
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Delete a Resource
      tags:
      - resources
      x-order: 50
    get:
      operationId: getResourceById
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: true if the resource should be fetched directly from the application
          rather from store.
        explode: true
        in: query
        name: live
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Resource
      tags:
      - resources
      x-order: 15
    patch:
      description: |
        This endpoint patches an existing resource.
      operationId: patchResource
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Patch'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Update a Resource
      tags:
      - resources
      x-order: 40
    put:
      description: |
        This endpoint replaces an existing resource.
      operationId: replaceResource
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Replace a Resource
      tags:
      - resources
      x-order: 30
  /resources/{appID}/{resourceTypes}/{id}/.async:
    delete:
      operationId: deleteResourceByIdAsync
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: the time where the operation should be executed.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: notBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Delete a Resource Asynchonously
      tags:
      - resources
      x-order: 55
    patch:
      operationId: patchResourceAsync
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: the time where the operation should be executed.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: notBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Patch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Update a Resource Asynchonously
      tags:
      - resources
      x-order: 42
    put:
      operationId: replaceResourceAsync
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: the time where the operation should be executed.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: notBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |
          a unique identifier of an external resource where this change should be correlated to
        example: /flows/1234
        explode: true
        in: query
        name: correlation
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Resource'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Replace a Resource Asynchonously
      tags:
      - resources
      x-order: 32
  /resources/{appID}/{resourceTypes}/{id}/.desired/:
    get:
      description: Get a desired state of a resource, taking into account roles and
        business rules.
      operationId: desiredResource
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Resource state calculated successfuly
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get Desired Resource
      tags:
      - resources
  /resources/{appID}/{resourceTypes}/{id}/.evaluate:
    get:
      operationId: evaluateResource
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceEval'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: test a resource against a rules filter and return an explanation of
        what needs to be patched
      tags:
      - internal
  /resources/{appID}/{resourceTypes}/{id}/.rules:
    post:
      description: |
        List rules matching a filter and also apply on a Resource, if all requested patches were applied.
      operationId: resourceRules
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ResourceRules'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rulesList'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List rules applying on a Resource
      tags:
      - resources
      x-order: 13
  /resources/{appID}/{resourceTypes}/{id}/.test:
    get:
      operationId: testResource
      parameters:
      - description: The id of the app the resource belongs to.
        example: azuread
        explode: false
        in: path
        name: appID
        required: true
        schema:
          type: string
        style: simple
      - description: the type of the resource.
        example: Users
        explode: false
        in: path
        name: resourceTypes
        required: true
        schema:
          type: string
        style: simple
      - description: the unique identifier of the resource.
        example: 111111
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Test a Resource Against a Filter
      tags:
      - resources
      x-order: 60
  /rules/:
    get:
      operationId: listRules
      parameters:
      - description: |
          The filter string used to request a subset of models.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: displayName sw "smith"
          type: string
        style: form
      - description: |
          The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int64
          type: integer
        style: form
      - description: |
          The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int64
          type: integer
        style: form
      - description: A string indicating the attribute whose value SHALL be used to
          order the returned responses.
        example: userName
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: A string indicating the order in which the "sortBy" parameter
          is applied.  Allowed values are "ascending" and "descending".
        example: ascending
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          enum:
          - ascending
          - descending
          type: string
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
        explode: true
        in: query
        name: attributes
        required: false
        schema:
          example:
          - userName
          - displayName
          items:
            type: string
          type: array
        style: form
      - description: |
          A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
        explode: true
        in: query
        name: excludedAttributes
        required: false
        schema:
          example:
          - meta
          - groups
          items:
            type: string
          type: array
        style: form
      - description: |
          a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
        example: 2020-18-01T15:04:05-07:00
        explode: true
        in: query
        name: forTime
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rulesList'
          description: A paged list of rules.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: List Rules
      tags:
      - rules
      x-order: 10
    post:
      operationId: createRule
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/SingleRule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The Rule state after creation.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create a Rule
      tags:
      - rules
      x-order: 30
  /rules/{id}:
    delete:
      operationId: deleteRule
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the rule to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The Rule was deleted successfully.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Delete a Rule
      tags:
      - rules
      x-order: 50
    get:
      operationId: getRule
      parameters:
      - description: The id of the rules to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Rule
      tags:
      - rules
      x-order: 20
    put:
      operationId: replaceRule
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the rule to replace.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SingleRule'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: The Rule state after the update.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Replace a Rule
      tags:
      - rules
      x-order: 40
  /scim-schemas/:
    post:
      operationId: createSCIMSchema
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SCIMSchema'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCIMSchema'
          description: The SCIM Schema state after creation.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Create a SCIM Schema
      tags:
      - schemas
      x-order: 10
  /scim-schemas/{id}:
    get:
      operationId: getSCIMSchema
      parameters:
      - description: The id of the schema to retrieve.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCIMSchema'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a SCIM Schema
      tags:
      - schemas
      x-order: 20
    put:
      operationId: replaceSCIMSchema
      parameters:
      - description: |
          a descriptive reason of the change
        example: required due to...
        explode: true
        in: query
        name: reason
        required: false
        schema:
          type: string
        style: form
      - description: The id of the schema to replace.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SCIMSchema'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCIMSchema'
          description: The SCIM Schema state after replacement.
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "412":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Replace a SCIM Schema
      tags:
      - schemas
      x-order: 40
  /secrets/{path}:
    get:
      operationId: getSecret
      parameters:
      - description: The path to the secret
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - description: the cipher text to decrypt, used by the ondemand vault engine.
        explode: true
        in: query
        name: ciphertext
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Get a Secret
      tags:
      - secrets
      x-order: 10
    put:
      operationId: putSecret
      parameters:
      - description: The path to the secret
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SecretPut'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
          description: Expected response to a valid request
        "400":
          content:
            application/json:
              example:
                code: "400"
                message: 'Bad Request: Invalid argument (invalid request payload).'
                status: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: The submitted request is invalid.
        "401":
          content:
            application/json:
              example:
                code: "401"
                message: client is not authenticated.
                status: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authenticated.
        "403":
          content:
            application/json:
              example:
                code: "403"
                message: the request action is forbidden.
                status: Forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Client is not authorized to perform the requested action.
        "404":
          content:
            application/json:
              example:
                code: "404"
                message: the requested resource could not be found.
                status: Not Found
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found.
        "500":
          content:
            application/json:
              example:
                code: "500"
                message: an internal error has occurred.
                status: Internal Error
              schema:
                $ref: '#/components/schemas/Error'
          description: An internal error has occured.
      summary: Put a Secret
      tags:
      - secrets
      x-order: 20
components:
  parameters:
    attributes:
      description: |
        A multi-valued list of strings indicating the names of resource attributes to return in the response, overriding the set of attributes that would be returned by default.
      explode: true
      in: query
      name: attributes
      required: false
      schema:
        example:
        - userName
        - displayName
        items:
          type: string
        type: array
      style: form
    correlation:
      description: |
        a unique identifier of an external resource where this change should be correlated to
      example: /flows/1234
      explode: true
      in: query
      name: correlation
      required: false
      schema:
        type: string
      style: form
    count:
      description: |
        The desired maximum number of query results per page, e.g., 10. A negative value is interpreted as "0". A value of "0" indicates that no model results are to be returned except for "totalResults".
      explode: true
      in: query
      name: count
      required: false
      schema:
        default: 10
        format: int64
        type: integer
      style: form
    excludedAttributes:
      description: |
        A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  This parameter SHALL have no effect on attributes whose schema "returned" setting is "always".
      explode: true
      in: query
      name: excludedAttributes
      required: false
      schema:
        example:
        - meta
        - groups
        items:
          type: string
        type: array
      style: form
    filter:
      description: |
        The filter string used to request a subset of models.
      explode: true
      in: query
      name: filter
      required: false
      schema:
        example: displayName sw "smith"
        type: string
      style: form
    forTime:
      description: |
        a date time indicating that the requested resources should be retrieved from history as how they looked for the specified time.
      example: 2020-18-01T15:04:05-07:00
      explode: true
      in: query
      name: forTime
      required: false
      schema:
        format: date-time
        type: string
      style: form
    notBefore:
      description: the time where the operation should be executed.
      example: 2020-18-01T15:04:05-07:00
      explode: true
      in: query
      name: notBefore
      required: false
      schema:
        format: date-time
        type: string
      style: form
    reason:
      description: |
        a descriptive reason of the change
      example: required due to...
      explode: true
      in: query
      name: reason
      required: false
      schema:
        type: string
      style: form
    resourceAppID:
      description: The id of the app the resource belongs to.
      example: azuread
      explode: false
      in: path
      name: appID
      required: true
      schema:
        type: string
      style: simple
    resourceID:
      description: the unique identifier of the resource.
      example: 111111
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    resourceTypes:
      description: the type of the resource.
      example: Users
      explode: false
      in: path
      name: resourceTypes
      required: true
      schema:
        type: string
      style: simple
    sortBy:
      description: A string indicating the attribute whose value SHALL be used to
        order the returned responses.
      example: userName
      explode: true
      in: query
      name: sortBy
      required: false
      schema:
        type: string
      style: form
    sortOrder:
      description: A string indicating the order in which the "sortBy" parameter is
        applied.  Allowed values are "ascending" and "descending".
      example: ascending
      explode: true
      in: query
      name: sortOrder
      required: false
      schema:
        enum:
        - ascending
        - descending
        type: string
      style: form
    startIndex:
      description: |
        The 1-based index of the first query result. A value less than 1 SHALL be interpreted as 1.
      explode: true
      in: query
      name: startIndex
      required: false
      schema:
        default: 0
        format: int64
        type: integer
      style: form
  requestBodies:
    ApplyChangeLog:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplyChangeLogRequest'
      description: a JSON containing the information required to apply a ChangeLog.
      required: true
    AppsChanges:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppChangesBody'
      description: a JSON containing the information required to discovery applications
        changes.
      required: true
    CancelChangeLog:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CancelChangeLogRequest'
      description: a JSON containing the information required to cancel a ChangeLog.
      required: true
    CancelFlowInstance:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CancelFlowInstanceRequest'
      description: a JSON containing the information required to cancel a Flow Instance.
      required: true
    CorrelateResources:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorrelateResource'
    MapResources:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MapResource'
    Patch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchRequest'
      description: a request to patch (update) a single model
      required: true
    RefsRemoval:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/refsReqBody'
      description: Removing refs request body
      required: true
    Resource:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Resource'
    ResourceDiff:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/resourceDiffReq'
    ResourceRules:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/resourceRules'
    Search:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/searchBody'
      description: Portal General Search parameters
      required: true
    SecretPut:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecretPutBody'
      description: a JSON containing the information required to put a secret.
      required: true
    SingleFilter:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Filter'
    SingleMapper:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Mapper'
    SingleRule:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Rule'
    SingleTask:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: true
  responses:
    BadRequest:
      content:
        application/json:
          example:
            code: "400"
            message: 'Bad Request: Invalid argument (invalid request payload).'
            status: Bad Request
          schema:
            $ref: '#/components/schemas/Error'
      description: The submitted request is invalid.
    Forbidden:
      content:
        application/json:
          example:
            code: "403"
            message: the request action is forbidden.
            status: Forbidden
          schema:
            $ref: '#/components/schemas/Error'
      description: Client is not authorized to perform the requested action.
    InternalError:
      content:
        application/json:
          example:
            code: "500"
            message: an internal error has occurred.
            status: Internal Error
          schema:
            $ref: '#/components/schemas/Error'
      description: An internal error has occured.
    NotFound:
      content:
        application/json:
          example:
            code: "404"
            message: the requested resource could not be found.
            status: Not Found
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified resource was not found.
    Unauthorized:
      content:
        application/json:
          example:
            code: "401"
            message: client is not authenticated.
            status: Unauthorized
          schema:
            $ref: '#/components/schemas/Error'
      description: Client is not authenticated.
  schemas:
    ApiToken:
      example:
        displayName: displayName
        identityId: identityId
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        active: true
        id: id
        issuedAt: 2000-01-23T04:56:07.000+00:00
        expiresAt: 2000-01-23T04:56:07.000+00:00
        signedToken: signedToken
      properties:
        active:
          type: boolean
        displayName:
          type: string
        expiresAt:
          format: date-time
          type: string
        id:
          type: string
        identityId:
          type: string
        issuedAt:
          format: date-time
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        signedToken:
          type: string
      title: ApiToken
      type: object
    App:
      example:
        appLogic: appLogic
        keywords:
        - keywords
        - keywords
        displayName: displayName
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        appId: appId
        id: id
        config: ""
        logoURL: logoURL
      properties:
        appId:
          type: string
        appLogic:
          type: string
        config: {}
        displayName:
          type: string
        id:
          type: string
        keywords:
          items:
            type: string
          type: array
        logoURL:
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
      title: App
      type: object
    AppChangesBody:
      example:
        mode: full
        appIds:
        - '["myapp"]'
        - '["myapp"]'
      properties:
        appIds:
          items:
            example: '["myapp"]'
            type: string
          type: array
        mode:
          enum:
          - full
          - incremental
          type: string
      type: object
    ApplyChangeLogRequest:
      additionalProperties: true
      type: object
    ApplyChangeLogResponse:
      example:
        report:
          add:
          - detail: could not find entry in store
            id: id
            status: 404
          - detail: could not find entry in store
            id: id
            status: 404
          patch:
          - detail: could not find entry in store
            id: id
            status: 404
          - detail: could not find entry in store
            id: id
            status: 404
          replace:
          - detail: could not find entry in store
            id: id
            status: 404
          - detail: could not find entry in store
            id: id
            status: 404
          detail: applied on store
          delete:
          - detail: could not find entry in store
            id: id
            status: 404
          - detail: could not find entry in store
            id: id
            status: 404
        logId: logId
      properties:
        logId:
          type: string
        report:
          $ref: '#/components/schemas/ApplyChangesReport'
      type: object
    ApplyChangeReport:
      example:
        detail: could not find entry in store
        id: id
        status: 404
      properties:
        detail:
          example: could not find entry in store
          type: string
        id:
          type: string
        status:
          example: 404
          type: integer
      type: object
    ApplyChangesReport:
      example:
        add:
        - detail: could not find entry in store
          id: id
          status: 404
        - detail: could not find entry in store
          id: id
          status: 404
        patch:
        - detail: could not find entry in store
          id: id
          status: 404
        - detail: could not find entry in store
          id: id
          status: 404
        replace:
        - detail: could not find entry in store
          id: id
          status: 404
        - detail: could not find entry in store
          id: id
          status: 404
        detail: applied on store
        delete:
        - detail: could not find entry in store
          id: id
          status: 404
        - detail: could not find entry in store
          id: id
          status: 404
      properties:
        add:
          items:
            $ref: '#/components/schemas/ApplyChangeReport'
          type: array
        delete:
          items:
            $ref: '#/components/schemas/ApplyChangeReport'
          type: array
        detail:
          example: applied on store
          type: string
        patch:
          items:
            $ref: '#/components/schemas/ApplyChangeReport'
          type: array
        replace:
          items:
            $ref: '#/components/schemas/ApplyChangeReport'
          type: array
      type: object
    AuthError:
      example:
        code: 0
        message: message
        status: status
      properties:
        code:
          type: integer
        message:
          type: string
        status:
          type: string
      type: object
    AuthErrors:
      example:
        id: id
        errors:
        - code: 0
          message: message
          status: status
        - code: 0
          message: message
          status: status
      properties:
        errors:
          items:
            $ref: '#/components/schemas/AuthError'
          type: array
        id:
          type: string
      type: object
    CancelChangeLogRequest:
      additionalProperties: true
      type: object
    CancelFlowInstanceRequest:
      additionalProperties: true
      type: object
    ChangeLog:
      example:
        note: note
        apply: apply
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        id: id
        state: state
      properties:
        apply:
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        note:
          type: string
        state:
          type: string
      title: ChangeLog
      type: object
    Changelog:
      properties:
        apply:
          enum:
          - created
          - applied
          - canceled
          - error
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
        note:
          type: string
        state:
          enum:
          - store
          - jobs
          type: string
      type: object
    Commit:
      example:
        reason: reason
        correlation: correlation
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        requestId: requestId
        by: by
        id: id
      properties:
        by:
          type: string
        correlation:
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        reason:
          type: string
        requestId:
          type: string
      title: Commit
      type: object
    CorrelateResource:
      example:
        filter: filter
        corrId: corrId
        refPath: refPath
      properties:
        corrId:
          description: id of a filter template used to find the resources to correlate
            to.
          type: string
        filter:
          description: used to request a subset of resources and must be a valid FILTER
            expression.
          type: string
        refPath:
          description: The ref path create when resources are correlated.
          type: string
      required:
      - corrId
      - filter
      - refPath
      type: object
    DocPatch:
      properties:
        created:
          format: date-time
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
        patch:
          items:
            $ref: '#/components/schemas/PatchOP'
          type: array
    EntitlementReqResponse:
      example:
        flowIds:
        - flowIds
        - flowIds
        notCreated:
        - notCreated
        - notCreated
      properties:
        flowIds:
          items:
            type: string
          type: array
        notCreated:
          items:
            type: string
          type: array
      type: object
    EntitlementRequest:
      example:
        operations:
        - requestedFor: requestedFor
          requestedEntitlement:
            path: path
            neededForHours: 0
            comment: comment
            value: value
        - requestedFor: requestedFor
          requestedEntitlement:
            path: path
            neededForHours: 0
            comment: comment
            value: value
      properties:
        operations:
          items:
            $ref: '#/components/schemas/EntitlementRequest_operations'
          type: array
      type: object
    Error:
      properties:
        code:
          type: integer
        message:
          type: string
        status:
          type: string
      type: object
    Filter:
      example:
        filter: filter
        template: true
        displayName: displayName
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        description: description
        id: id
        table: table
      properties:
        description:
          type: string
        displayName:
          type: string
        filter:
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        table:
          type: string
        template:
          type: boolean
      title: Filter
      type: object
    FlowDefinition:
      properties:
        StatusExplanations:
          items:
            additionalProperties: {}
            type: object
          type: array
        description:
          type: string
        displayName:
          type: string
        endedAt:
          format: date-time
          type: string
        flow:
          $ref: '#/components/schemas/FlowDefinition_flow'
        id:
          type: string
        startedAt:
          format: date-time
          type: string
        status:
          type: string
        variables: {}
      type: object
    FlowInstance:
      example:
        StatusExplanations:
        - key: ""
        - key: ""
        variables: ""
        displayName: displayName
        endedAt: 2000-01-23T04:56:07.000+00:00
        description: description
        startedAt: 2000-01-23T04:56:07.000+00:00
        id: id
        flow:
          displayName: displayName
          externalId: externalId
          id: id
          version: 0
        status: status
      properties:
        StatusExplanations:
          items:
            additionalProperties: {}
            type: object
          type: array
        description:
          type: string
        displayName:
          type: string
        endedAt:
          format: date-time
          type: string
        flow:
          $ref: '#/components/schemas/FlowDefinition_flow'
        id:
          type: string
        startedAt:
          format: date-time
          type: string
        status:
          type: string
        variables: {}
      type: object
    HealthResponse:
      example:
        errors:
          key: errors
        status: OK
      properties:
        errors:
          additionalProperties:
            type: string
          type: object
        status:
          enum:
          - OK
          - Service Unavailable
          type: string
      required:
      - status
      type: object
    Insight:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/Insight_actions'
          type: array
        displayName:
          type: string
        id:
          type: string
        insightId:
          type: string
        insightModelType:
          type: string
        kind:
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        modelIds:
          items:
            type: string
          type: array
        payload: {}
        readBy:
          items:
            type: string
          type: array
        severity:
          format: int64
          type: integer
        snoozeUntil:
          format: date-time
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    JSONSchema:
      additionalProperties: true
      example:
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        externalId: externalId
        id: id
      properties:
        externalId:
          description: externally added unique identifier.
          type: string
        id:
          description: unique identifier of the schema.
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
      type: object
    Job:
      example:
        reason: reason
        lastExecutedAt: 2000-01-23T04:56:07.000+00:00
        kind: kind
        commitId: commitId
        error: error
        notBefore: 2000-01-23T04:56:07.000+00:00
        failureSize: 0
        correlation: correlation
        payload: ""
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        by: by
        id: id
        status: status
        statusCode: 6
      properties:
        by:
          type: string
        commitId:
          type: string
        correlation:
          type: string
        error:
          type: string
        failureSize:
          format: int64
          type: integer
        id:
          type: string
        kind:
          type: string
        lastExecutedAt:
          format: date-time
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        notBefore:
          format: date-time
          type: string
        payload: {}
        reason:
          type: string
        status:
          type: string
        statusCode:
          format: int64
          type: integer
      title: Job
      type: object
    LoginFlow:
      example:
        method: method
        forced: true
        methods:
          password:
            method: method
            config:
              method: method
              action: action
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              fields:
              - name: name
                messages:
                - id: 0
                  text: text
                  type: info
                - id: 0
                  text: text
                  type: info
                disabled: true
                type: type
                value: value
                required: true
              - name: name
                messages:
                - id: 0
                  text: text
                  type: info
                - id: 0
                  text: text
                  type: info
                disabled: true
                type: type
                value: value
                required: true
          spnego:
            method: method
            config:
              method: method
              action: action
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              fields:
              - name: name
                messages:
                - id: 0
                  text: text
                  type: info
                - id: 0
                  text: text
                  type: info
                disabled: true
                type: type
                value: value
                required: true
              - name: name
                messages:
                - id: 0
                  text: text
                  type: info
                - id: 0
                  text: text
                  type: info
                disabled: true
                type: type
                value: value
                required: true
          webauthn:
            method: method
            config:
              method: method
              action: action
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              fields:
              - name: name
                messages:
                - id: 0
                  text: text
                  type: info
                - id: 0
                  text: text
                  type: info
                disabled: true
                type: type
                value: value
                required: true
              - name: name
                messages:
                - id: 0
                  text: text
                  type: info
                - id: 0
                  text: text
                  type: info
                disabled: true
                type: type
                value: value
                required: true
        id: id
      properties:
        forced:
          type: boolean
        id:
          type: string
        method:
          type: string
        methods:
          $ref: '#/components/schemas/LoginFlow_methods'
      type: object
    LoginFlowMethod:
      example:
        method: method
        config:
          method: method
          action: action
          messages:
          - id: 0
            text: text
            type: info
          - id: 0
            text: text
            type: info
          fields:
          - name: name
            messages:
            - id: 0
              text: text
              type: info
            - id: 0
              text: text
              type: info
            disabled: true
            type: type
            value: value
            required: true
          - name: name
            messages:
            - id: 0
              text: text
              type: info
            - id: 0
              text: text
              type: info
            disabled: true
            type: type
            value: value
            required: true
      properties:
        config:
          $ref: '#/components/schemas/LoginFlowMethod_config'
        method:
          type: string
      type: object
    MapResource:
      example:
        filter: filter
        corrId: corrId
        mapperId: mapperId
      properties:
        corrId:
          description: id of a filter template used to find the resources to map from
          type: string
        filter:
          description: used to request a subset of resources and must be a valid FILTER
            expression.
          type: string
        mapperId:
          description: The mapper to be used on the matched resources to produce the
            attributes to be copied. If not set it tries to copy any possible attribute
          type: string
      required:
      - corrId
      - filter
      - mapperId
      type: object
    Mapper:
      example:
        variables:
        - name: name
          expr: expr
        - name: name
          expr: expr
        displayName: displayName
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        mapper: ""
        id: id
        lang: lang
      properties:
        displayName:
          type: string
        id:
          type: string
        lang:
          type: string
        mapper: {}
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        variables:
          items:
            $ref: '#/components/schemas/Mapper_variables'
          type: array
      title: Mapper
      type: object
    Meta:
      example:
        created: 2000-01-23T04:56:07.000+00:00
        appId: appId
        tenantId: tenantId
        location: location
        commitId: commitId
        lastModified: 2000-01-23T04:56:07.000+00:00
        refersToId: refersToId
        resourceType: resourceType
        revision: 0
      properties:
        appId:
          type: string
        commitId:
          type: string
        created:
          format: date-time
          type: string
        lastModified:
          format: date-time
          type: string
        location:
          type: string
        refersToId:
          type: string
        resourceType:
          type: string
        revision:
          format: int64
          type: integer
        tenantId:
          type: string
      title: Meta
      type: object
    PatchOP:
      example:
        op: /replace
        path: /status
        value: canceled
      properties:
        op:
          enum:
          - add
          - replace
          - remove
          example: /replace
          type: string
        path:
          example: /status
          type: string
        value:
          example: canceled
      required:
      - op
      - path
      - value
      type: object
    PatchRequest:
      example:
        Revision: 0
        Operations:
        - op: /replace
          path: /status
          value: canceled
        - op: /replace
          path: /status
          value: canceled
      properties:
        Operations:
          items:
            $ref: '#/components/schemas/PatchOP'
          type: array
        Revision:
          format: int64
          type: integer
      type: object
    Resource:
      additionalProperties: true
      example:
        displayName: Administrators
        id: 3NUzqrq3s2tB3Wcg6b2eyi
        meta:
          appId: azuread
          resourceType: Group
      properties:
        id:
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
      type: object
    ResourceType:
      example:
        schema: schema
        toStore: toStore
        description: description
        mode: mode
        toApp: toApp
        endpoint: endpoint
        ui:
          overview:
          - overview
          - overview
          edit:
          - edit
          - edit
          rules:
          - rules
          - rules
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        appId: appId
        name: name
        schemaExtensions:
        - schema: schema
          required: true
        - schema: schema
          required: true
        schemaInterfaces:
        - schema: schema
          required: true
        - schema: schema
          required: true
        id: id
      properties:
        appId:
          type: string
        description:
          type: string
        endpoint:
          type: string
        id:
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        mode:
          type: string
        name:
          type: string
        schema:
          type: string
        schemaExtensions:
          items:
            $ref: '#/components/schemas/ResourceType_schemaExtensions'
          type: array
        schemaInterfaces:
          items:
            $ref: '#/components/schemas/ResourceType_schemaExtensions'
          type: array
        toApp:
          type: string
        toStore:
          type: string
        ui:
          $ref: '#/components/schemas/ResourceType_ui'
      title: ResourceType
      type: object
    Rule:
      example:
        filter: filter
        lifecycle: lifecycle
        result:
          op: op
          path: path
          modelType: modelType
          value: ""
        keywords:
        - keywords
        - keywords
        displayName: displayName
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        active: true
        id: id
        modelType: modelType
      properties:
        active:
          type: boolean
        displayName:
          type: string
        filter:
          type: string
        id:
          type: string
        keywords:
          items:
            type: string
          type: array
        lifecycle:
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
        modelType:
          type: string
        result:
          $ref: '#/components/schemas/RuleResult'
      required:
      - displayName
      - id
      - match
      - result
      type: object
    RuleResult:
      example:
        op: op
        path: path
        modelType: modelType
        value: ""
      properties:
        modelType:
          type: string
        op:
          type: string
        path:
          type: string
        value:
          type: interface{}
      type: object
    RuleResultValue:
      type: interface{}
    SCIMSchema:
      example:
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        name: name
        description: description
        attributes:
        - description: phone numbers
          referenceTypes:
          - referenceTypes
          - referenceTypes
          type: string
          required: true
          subAttributes:
          - null
          - null
          search:
            fuzziness: 2
            boost: 1
          noRevision: true
          uniqueness: none
          name: phoneNumber
          canonicalValues: work
          mutability: readWrite
          caseExact: true
          multiValued: false
          returned: default
        - description: phone numbers
          referenceTypes:
          - referenceTypes
          - referenceTypes
          type: string
          required: true
          subAttributes:
          - null
          - null
          search:
            fuzziness: 2
            boost: 1
          noRevision: true
          uniqueness: none
          name: phoneNumber
          canonicalValues: work
          mutability: readWrite
          caseExact: true
          multiValued: false
          returned: default
        id: id
      properties:
        attributes:
          items:
            $ref: '#/components/schemas/SCIMSchemaAttribute'
          type: array
        description:
          description: a more detailed description.
          type: string
        id:
          description: unique identifier of the schema.
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
        name:
          description: the name of the schema.
          type: string
    SCIMSchemaAttribute:
      example:
        description: phone numbers
        referenceTypes:
        - referenceTypes
        - referenceTypes
        type: string
        required: true
        subAttributes:
        - null
        - null
        search:
          fuzziness: 2
          boost: 1
        noRevision: true
        uniqueness: none
        name: phoneNumber
        canonicalValues: work
        mutability: readWrite
        caseExact: true
        multiValued: false
        returned: default
      properties:
        canonicalValues:
          description: A collection of suggested canonical values that MAY be used
            (e.g., "work", "home")
          example: work
          items:
            type: string
          type: array
        caseExact:
          description: true if a string attribute is case sensitive.
          type: boolean
        description:
          description: a more detailed description.
          example: phone numbers
          type: string
        multiValued:
          description: true if this is a multi valued (array) attribute
          example: false
          type: boolean
        mutability:
          enum:
          - readOnly
          - readWrite
          - immutable
          - writeOnly
          example: readWrite
          type: string
        name:
          description: the name of the attribute.
          example: phoneNumber
          type: string
        noRevision:
          description: true if a change of this attribute should not create a revision
            in history.
          type: boolean
        referenceTypes:
          description: indicates the resource types thatare referenced.
          items:
            type: string
          type: array
        required:
          description: true if this attribute is required.
          type: boolean
        returned:
          enum:
          - always
          - never
          - default
          - request
          example: default
          type: string
        search:
          $ref: '#/components/schemas/SCIMSchemaAttribute_search'
        subAttributes:
          items:
            $ref: '#/components/schemas/SCIMSchemaAttribute'
          type: array
        type:
          enum:
          - string
          - boolean
          - binary
          - decimal
          - integer
          - dateTime
          - reference
          - complex
          example: string
          type: string
        uniqueness:
          enum:
          - none
          - server
          - global
          type: string
      required:
      - name
      - type
    Secret:
      example:
        data:
          secret: passwd
          user: root
      properties:
        data:
          example:
            secret: passwd
            user: root
          type: object
    SecretPutBody:
      $ref: '#/components/schemas/Secret'
    Session:
      example:
        authAt: 2000-01-23T04:56:07.000+00:00
        identity:
          displayName: Eric Crose
        identityId: 8KCibRUhRDsaz5CmaAbmWB
        active: true
        id: QE8WQvyqF7WTfABCq5mhRi
        issuedAt: 2000-01-23T04:56:07.000+00:00
        expiresAt: 2000-01-23T04:56:07.000+00:00
      properties:
        active:
          example: true
          type: boolean
        authAt:
          format: date-time
          type: string
        expiresAt:
          format: date-time
          type: string
        id:
          example: QE8WQvyqF7WTfABCq5mhRi
          type: string
        identity:
          $ref: '#/components/schemas/Session_identity'
        identityId:
          example: 8KCibRUhRDsaz5CmaAbmWB
          type: string
        issuedAt:
          format: date-time
          type: string
      type: object
    Task:
      example:
        formId: formId
        variables: ""
        displayName: displayName
        description: description
        externalId: externalId
        ownerId: ownerId
        assigneeId: assigneeId
        groupsIds:
        - groupsIds
        - groupsIds
        due: 2000-01-23T04:56:07.000+00:00
        meta:
          created: 2000-01-23T04:56:07.000+00:00
          appId: appId
          tenantId: tenantId
          location: location
          commitId: commitId
          lastModified: 2000-01-23T04:56:07.000+00:00
          refersToId: refersToId
          resourceType: resourceType
          revision: 0
        ended: 2000-01-23T04:56:07.000+00:00
        id: id
        usersIds:
        - usersIds
        - usersIds
        flow:
          flowExternalId: flowExternalId
          flowKey: flowKey
          flowInstanceKey: flowInstanceKey
        status: status
      properties:
        assigneeId:
          type: string
        description:
          type: string
        displayName:
          type: string
        due:
          format: date-time
          type: string
        ended:
          format: date-time
          type: string
        externalId:
          type: string
        flow:
          $ref: '#/components/schemas/Task_flow'
        formId:
          type: string
        groupsIds:
          items:
            type: string
          type: array
        id:
          type: string
        meta:
          $ref: '#/components/schemas/ApiToken_meta'
        ownerId:
          type: string
        status:
          type: string
        usersIds:
          items:
            type: string
          type: array
        variables: {}
      title: Task
      type: object
    UserFacingMessage:
      example:
        id: 0
        text: text
        type: info
      properties:
        id:
          type: integer
        text:
          type: string
        type:
          enum:
          - info
          - error
          type: string
      type: object
    apiTokensList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/apiTokensList_allOf'
    appsList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/appsList_allOf'
    changeLogsList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/changeLogsList_allOf'
    commitsList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/commitsList_allOf'
    filtersList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/filtersList_allOf'
    flowCancel:
      example:
        notCanceledJobs:
        - notCanceledJobs
        - notCanceledJobs
        canceledJobs:
        - canceledJobs
        - canceledJobs
        flowStatus: flowStatus
        taskIds:
        - taskIds
        - taskIds
        flowId: flowId
      properties:
        canceledJobs:
          description: jobs created by the flow that were due to run and were canceled
          items:
            type: string
          type: array
        flowId:
          description: flow instance id that was canceled
          type: string
        flowStatus:
          description: flow status after cancellation. always "canceled"
          type: string
        notCanceledJobs:
          description: jobs created by the flow that were due to run and failed cancel
          items:
            type: string
          type: array
        taskIds:
          description: flow tasks that were canceled along with the flow
          items:
            type: string
          type: array
      type: object
    flowInstancesList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/flowInstancesList_allOf'
    insightList:
      items:
        $ref: '#/components/schemas/Insight'
      type: array
    jobsList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/jobsList_allOf'
    list:
      properties:
        itemsPerPage:
          example: 10
          type: integer
        startIndex:
          example: 1
          format: int64
          type: integer
        totalResults:
          example: 100
          format: int64
          type: integer
      type: object
    mappersList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/mappersList_allOf'
    patchesList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/patchesList_allOf'
    refsReqBody:
      properties:
        limitAppIds:
          items:
            type: string
          type: array
      required:
      - limitAppIds
      type: object
    resourceDiffReq:
      properties:
        current:
          $ref: '#/components/schemas/Resource'
        desired:
          $ref: '#/components/schemas/Resource'
        ignoreKeys:
          items:
            type: string
          type: array
        location:
          type: string
      required:
      - current
      - desired
      - location
      type: object
    resourceDiffRes:
      example:
        operations:
        - op: /replace
          path: /status
          value: canceled
        - op: /replace
          path: /status
          value: canceled
      properties:
        operations:
          items:
            $ref: '#/components/schemas/PatchOP'
          type: array
      type: object
    resourceEval:
      example:
        effective:
        - op: op
          path: path
          modelType: modelType
          value: ""
        - op: op
          path: path
          modelType: modelType
          value: ""
        explanation:
          key: '{}'
      properties:
        effective:
          items:
            $ref: '#/components/schemas/RuleResult'
          type: array
        explanation:
          additionalProperties: true
          type: object
      type: object
    resourceList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/resourceList_allOf'
    resourceRules:
      properties:
        Patch:
          items:
            $ref: '#/components/schemas/PatchOP'
          type: array
        filter:
          description: which rules to check against
          type: string
      type: object
    resourceTypesList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/resourceTypesList_allOf'
    resourcesList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/resourceList_allOf'
    rulesList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/rulesList_allOf'
    searchBody:
      properties:
        appIds:
          items:
            type: string
          minItems: 1
          type: array
        attributes:
          items:
            type: string
          type: array
        count:
          default: 10
          minimum: 0
          type: integer
        searchFor:
          type: string
        startIndex:
          default: 0
          minimum: 0
          type: integer
        term:
          type: string
      required:
      - searchFor
      type: object
    secretsList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/secretsList_allOf'
    tasksList:
      allOf:
      - $ref: '#/components/schemas/list'
      - $ref: '#/components/schemas/tasksList_allOf'
    inline_response_200:
      example:
        latency: 0
        message: message
      properties:
        latency:
          format: int64
          title: the time took for the ping action to complete.
          type: integer
        message:
          title: an optional message returned part of a successful health check.
          type: string
      type: object
    inline_object:
      properties:
        sessionToken:
          description: The token of the session to invalidate
          type: string
      type: object
    inline_response_200_1:
      example:
        valid: true
      properties:
        valid:
          type: boolean
      type: object
    inline_object_1:
      properties:
        variables:
          additionalProperties: true
          description: variables to complete the task with
          type: object
      type: object
    inline_response_200_2:
      example:
        match: true
      properties:
        match:
          type: boolean
      required:
      - match
      type: object
    ApiToken_meta:
      example:
        created: 2000-01-23T04:56:07.000+00:00
        appId: appId
        tenantId: tenantId
        location: location
        commitId: commitId
        lastModified: 2000-01-23T04:56:07.000+00:00
        refersToId: refersToId
        resourceType: resourceType
        revision: 0
      properties:
        appId:
          type: string
        commitId:
          type: string
        created:
          format: date-time
          type: string
        lastModified:
          format: date-time
          type: string
        location:
          type: string
        refersToId:
          type: string
        resourceType:
          type: string
        revision:
          format: int64
          type: integer
        tenantId:
          type: string
      type: object
    EntitlementRequest_requestedEntitlement:
      example:
        path: path
        neededForHours: 0
        comment: comment
        value: value
      properties:
        comment:
          type: string
        neededForHours:
          format: int64
          type: integer
        path:
          type: string
        value:
          type: string
      type: object
    EntitlementRequest_operations:
      example:
        requestedFor: requestedFor
        requestedEntitlement:
          path: path
          neededForHours: 0
          comment: comment
          value: value
      properties:
        requestedEntitlement:
          $ref: '#/components/schemas/EntitlementRequest_requestedEntitlement'
        requestedFor:
          type: string
      type: object
    FlowDefinition_flow:
      example:
        displayName: displayName
        externalId: externalId
        id: id
        version: 0
      properties:
        displayName:
          type: string
        externalId:
          type: string
        id:
          type: string
        version:
          format: int64
          type: integer
      type: object
    Insight_actions:
      properties:
        description:
          type: string
        id:
          type: string
      type: object
    LoginFlow_methods:
      example:
        password:
          method: method
          config:
            method: method
            action: action
            messages:
            - id: 0
              text: text
              type: info
            - id: 0
              text: text
              type: info
            fields:
            - name: name
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              disabled: true
              type: type
              value: value
              required: true
            - name: name
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              disabled: true
              type: type
              value: value
              required: true
        spnego:
          method: method
          config:
            method: method
            action: action
            messages:
            - id: 0
              text: text
              type: info
            - id: 0
              text: text
              type: info
            fields:
            - name: name
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              disabled: true
              type: type
              value: value
              required: true
            - name: name
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              disabled: true
              type: type
              value: value
              required: true
        webauthn:
          method: method
          config:
            method: method
            action: action
            messages:
            - id: 0
              text: text
              type: info
            - id: 0
              text: text
              type: info
            fields:
            - name: name
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              disabled: true
              type: type
              value: value
              required: true
            - name: name
              messages:
              - id: 0
                text: text
                type: info
              - id: 0
                text: text
                type: info
              disabled: true
              type: type
              value: value
              required: true
      properties:
        password:
          $ref: '#/components/schemas/LoginFlowMethod'
        spnego:
          $ref: '#/components/schemas/LoginFlowMethod'
        webauthn:
          $ref: '#/components/schemas/LoginFlowMethod'
      type: object
    LoginFlowMethod_config_fields:
      example:
        name: name
        messages:
        - id: 0
          text: text
          type: info
        - id: 0
          text: text
          type: info
        disabled: true
        type: type
        value: value
        required: true
      properties:
        disabled:
          type: boolean
        messages:
          items:
            $ref: '#/components/schemas/UserFacingMessage'
          type: array
        name:
          type: string
        required:
          type: boolean
        type:
          type: string
        value:
          type: string
      type: object
    LoginFlowMethod_config:
      example:
        method: method
        action: action
        messages:
        - id: 0
          text: text
          type: info
        - id: 0
          text: text
          type: info
        fields:
        - name: name
          messages:
          - id: 0
            text: text
            type: info
          - id: 0
            text: text
            type: info
          disabled: true
          type: type
          value: value
          required: true
        - name: name
          messages:
          - id: 0
            text: text
            type: info
          - id: 0
            text: text
            type: info
          disabled: true
          type: type
          value: value
          required: true
      properties:
        action:
          type: string
        fields:
          items:
            $ref: '#/components/schemas/LoginFlowMethod_config_fields'
          type: array
        messages:
          items:
            $ref: '#/components/schemas/UserFacingMessage'
          type: array
        method:
          type: string
      type: object
    Mapper_variables:
      example:
        name: name
        expr: expr
      properties:
        expr:
          type: string
        name:
          type: string
      type: object
    ResourceType_schemaExtensions:
      example:
        schema: schema
        required: true
      properties:
        required:
          type: boolean
        schema:
          type: string
      type: object
    ResourceType_ui:
      example:
        overview:
        - overview
        - overview
        edit:
        - edit
        - edit
        rules:
        - rules
        - rules
      properties:
        edit:
          items:
            type: string
          type: array
        overview:
          items:
            type: string
          type: array
        rules:
          items:
            type: string
          type: array
      type: object
    SCIMSchemaAttribute_search:
      example:
        fuzziness: 2
        boost: 1
      properties:
        boost:
          example: 1
          type: integer
        fuzziness:
          example: 2
          type: integer
      type: object
    Session_identity:
      example:
        displayName: Eric Crose
      properties:
        displayName:
          example: Eric Crose
          type: string
      type: object
    Task_flow:
      example:
        flowExternalId: flowExternalId
        flowKey: flowKey
        flowInstanceKey: flowInstanceKey
      properties:
        flowExternalId:
          type: string
        flowInstanceKey:
          type: string
        flowKey:
          type: string
      type: object
    apiTokensList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/ApiToken'
          type: array
      required:
      - Resources
      type: object
    appsList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/App'
          type: array
      required:
      - Resources
      type: object
    changeLogsList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/ChangeLog'
          type: array
      required:
      - Resources
      type: object
    commitsList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/Commit'
          type: array
      required:
      - Resources
      type: object
    filtersList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/Filter'
          type: array
      required:
      - Resources
      type: object
    flowInstancesList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/FlowInstance'
          type: array
      required:
      - Resources
      type: object
    jobsList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/Job'
          type: array
      required:
      - Resources
      type: object
    mappersList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/Mapper'
          type: array
      required:
      - Resources
      type: object
    patchesList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/DocPatch'
          type: array
      required:
      - Resources
      type: object
    resourceList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/Resource'
          type: array
      required:
      - Resources
      type: object
    resourceTypesList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/ResourceType'
          type: array
      required:
      - Resources
      type: object
    rulesList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
      required:
      - Resources
      type: object
    secretsList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/Secret'
          type: array
      required:
      - Resources
      type: object
    tasksList_allOf:
      properties:
        Resources:
          items:
            $ref: '#/components/schemas/Task'
          type: array
      required:
      - Resources
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
